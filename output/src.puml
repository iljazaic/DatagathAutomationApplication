' Generated by UML Generator
' Encoded: rHjhS-EsyRj-1IUVg9vyO_jUhkRYncVPENNii-UaIwVJwMGe4fPGauH2WF8fQVpRYmSVM3meokVCf1-ICu7TnM9Vs5r0Fr0M5QpCqW6zn_awAg8iYDE8qZF62hme6Ph699_XNr5mE5ZX10KnBk8K3GOIAhZ88foUa_mEBuFV1a7mOedOtwDDTCs7PoXFK14Enm4S6VnUOyzGB70L9aLnMM2slSGfGyNvAi9vk69iFGu-yl_FgbbERMO30f9oKkTfpISUI95Sv36fEBg5Got-MHwbc6ufnsS5ILDKI1e7oJQFCXpFeqMAPgZOu1YDWuazA61BYee6valx8UQOWFsCreHYHehjE3WNYyGCatmEfmJqWM3VPYdioyqeyF4o2lfpCgmKUutOYYIVeWo5554g0Cazohb6kAtaor6GSLccu-1Q_3EiXwK62DsDBHaIy_LGIw9HZy7Z7wKbANVlMiyWVYdIk40HGv_GWyG9cKCSvmA4St19YcmSpCqXBg7FYAv9Jj55phZPl__RgQ2CSymmfmqGu090Fr2vRBTUFAkkI_PJb9PecZDIRSf4LZ8nL1-bwQs8FPGRJxH-NmshVqvzot6cFwDVIaJPL2pyOJkTX3ZvTg92JP9vQadCHcaiyphAeoNAKCvCeznfQ2xKiCjo3ZOy8YHSlpFDaPnUDLIurSuc4LqjI5GafehTZji6rNY5aZ95oSN6tj-BZlsze02JDc0pvxZ0G9ayA2gu2-rhcgtJHcO-ba9_mDkFbr7GpOdcmP209xeXoITmPuvtiUdZphjZRuStTx0pJNgRW93ateODaVuGa_v8CdJBlISq9N15bZYNCwpd8PMI9Icbz_T6GKL1YfjOf1pvCaHIPqwLf88RILh-fVH_LV_PeVUpE2PbplRQ24URuMLUhlV2oj63P91ArCf2cxyjn8vGE8bOj8pOwcozJd4ihLj5Yjzujibm_7kGYUGkAfQqPk1V_-OaDmGduAWlitmolr76bcjdY4oajclmVL3jNDeys1Yj1dDuXCdL5CwSqx9mvA2-YiLXepytXtNQgOzn0MmvsX8bq_ovkAzpMGklcJ0vWVWpZIT1umCXAOhoYWYOTR5lYSKAQqeyCk9yCcGaGeA8GbT4VSS5hpRah0wL81eNU2tewSEHJCu-a6HhZm95y7_FagJWmGJeWbSZZk7ApZM2QtoFm1BhWcHh1ZZa9i-5fGzjC2r5uYx5C3UiDIuf8vceFLnMS56Bob9fEsE94ohrYnIimAz4Ax2hGLte4Eky4R-riZPbAmbIcRJgiiZeSmwrGa9dZO8jEjgKRGOkAXuA8JGNmxDQmx6TIvjp69ZXOgsfMOJqEOT9Ga8o-bear2WmN4C4qeHj4QXXQE262AIfsxjNmz0H32jGBc5RG3Lkk0n4_ibq7ekC3U5rECF66zUpRRoTiXsqEyxLnw6ATRICOwd3DfOUD1bN7UjgRvyfO2Fqrc70Sk8Qt5n3soLjSS6gzXPKVhMRUICHqxvwxGGaTPO3zDfGLrweVTbRR5AOwXWIURmUTFiSszzoFCl2mGxaSXGmyrodUhDrgrsW962LvB9sfxVbWcThG7EnJC6uHgumPU-RXEpKTNBN8fhNrFULKzU9XUtJYazEAvv3Ytb8kO6paXkr9HhwDcf4ZWfww1A81c2Te6wDxFOwgQdAoEVDtxqyhWL_ehzf1A2tjHEkb5tlcAcDuQJBsopL1Ty7Tr5APH597d9ePEBCC1F_GZXHpZza5uXl1-TCZASeNx9LyraMmEivlp83s71QqvpdjGggCGIjOrHXdVeQWy2cHm5WUXIOB0zT5EHWbARaGMuYfAGiOeqcmndYF6RhiIYka4rr5CIypkQXtkrRKpkCL5xbWdwAzzweNHlkMuy2cTXf0dCTyCs49K60_ncgNv1H6XSqp4cNhK1oLz9g89LgJ3Ce8t8LTdmNOvh9zGr8VKFQLME-WaPhm9BTTivXvTwGPlT8VK7IsKsrSYEj9IO3mQCqWgPvyuXRltuqeiAZimnyT9U1ZrR1z-Wk31rzG-LunXXqPvkLoiNLJeQw_OTQRwgs_b07_cOt-rCMQ7kNLa-ft-mgi8bhMi1nv0fciYkFhYeJqbjZZgJcHO7-WwfDLCS8-hh6nLO4ONXkL6UwDI4yaAi-EMDWMDaYo8gj4PsPKU1OM1YdOzbH81OjuQ8s-RpC5i8mSJKfaWOxNt0cPYAhRTWn0f0qqfOhU_QgaOW-1rEaRzEHAy5zLiNfoPNn_QnA6mLpw-xDMEzFgaMnMfl-rUcRcVnPjHZ3OYyzQZ7PgHusVm52em16SAjEsX4yKl8S2T4JoxuvLiS8R4MBGLqspzW0PiHLhd1pGiLT52F_gm1rgD_XFFcmDPF96tbcHEbx0_kqHN69hmUQBwEi2pA81dPYtFEvTwBERE75pP7TS0K9c7inxuebHruKU51vbu0RqCAtctjtWxUbhX7GU541m-JVWmKuQWFHa_XfqVjpe-C0NiHQRYxSJjTG58YxDMD0TPglWctlm-oN8LKlIjwTgUj_RcyN-kV-ZuMOGnbZfuhgOrI7W-9h0gs3zx2BxNtU5LMmlLXMpqRy3CkWla45ljlEVaclCBUAAAKXDRDWlRi5dj-qnxSYNJ5diJyqMZ4lwejhZGhpt5Uh5RqFOupEGNUzvMmbYKM4VQebO2vY6AknBOWfcPictU2OBrZqVE_Jih4HyBvDLJKt8nVnAYeOLHx5otPQfgnkpscODmkH-vsUWeFlZXHPfFfNWg-Ar4w13y7Tu0DcyKfLll9oWIi3ulA1EMZ0s39pLzGIRbPcMLHi-p2bKR49IeeyooH5tR0xfvkzjYehh3Hj4arwIGgPKu4pq9KPw2zYwYUSUJB3sJf5r_pCK8yFMXPeARMbIGnzPSxgC4yg_7zWjZfZB8fNudLKVsgZ825ncSb-sAJwowe7pHSzsls0UgXgFLojWwA96NOW3V__17E9K_GZulOYOmlGi7DA9UBDuuwbcaUtaqiHdmjsavlzpXX-ku9ipLtBrYV4U0vxhze15B3Lyz6OaqBOuvrNixSqpNukgc0BBrn70Rn6vNM7UJdQ-bn3JwYq3jvXJLZJPUTzC42szTg9xkdK0R4UK5_6FFOdqoeJeVSrG26EAkrpZzp3pLhu5Av4UFRpr2kvG5zHN3AaUeJoMjLSJrED3cocb8twnDFxssYRaYYvaF1squnRbVpkVCXQ4rG7iZZpQhxSV5Ql_rJ7pKaHmeDaoMYMnjql6dijPT-YmqO2iCdTjaETPTBOKpxfRORgrm3spmFKpP0xYzsHbJUkFlboVVtFdp-UpJxMoWs-3xvx-_Rrg-FZa-FZvFYl9r5oz6x1_tlrzisxasHnT_JwE3fExeuENyU7HszEtXqUlbuSdYmEtnmdhuuZz7Pn5ty7MYArYtGBgMs9-3OiGiS-GfJfqDxY6UhfC-XD-XBe7sMkKhqWeJTtPtQcucu4D1Oi4M1_o6WUENebnZC9IMs5udjkjeaeXaIb8PZOqNSQ1uks-cXVXEx4SYo_yprf9mvCxPoGzKlOtIyjEbxEsXVyPYoKYctF8kugr7mgokKLraM3LEw4b4Ad73kHVndW2TuBWR9aWZPx8FmwYma_KNqO-YVaJ3mhwhyC8-kZGoL6OwqsTZeAZAv7k7D4A_4-ojlYh-oA7ptoyg_E2Hm_V_hBmO7p9pGUKFqTk0V47o_zF-_nST6DeJFZXtpvyjH-ApDm_g339Ee44lIaONj_Ds6IwGJq_5QY4yTAWRtGWbdhs1uOp_rDVetfPiEEyIOekIRRnra3yocQtBd-pin-pKIKBQatE0Ftsnf1HklN6FVI1mTEJUczuMPlhYvUjpNxC9mjEH-maT-um3fP59DcyyO7fmcg4yHArwnI-kNB_vu28nouYqeNT-uwhuTL0rX_WTA1P0ZR0rcvZ9uXTqCQpjKNk16ldWGxs3IdFOck2UOtN1qI-3PWrSWRp7de-0vCPMW_y1grpDB_0G
' URL: http://www.plantuml.com/plantuml/uml/rHjhS-EsyRj-1IUVg9vyO_jUhkRYncVPENNii-UaIwVJwMGe4fPGauH2WF8fQVpRYmSVM3meokVCf1-ICu7TnM9Vs5r0Fr0M5QpCqW6zn_awAg8iYDE8qZF62hme6Ph699_XNr5mE5ZX10KnBk8K3GOIAhZ88foUa_mEBuFV1a7mOedOtwDDTCs7PoXFK14Enm4S6VnUOyzGB70L9aLnMM2slSGfGyNvAi9vk69iFGu-yl_FgbbERMO30f9oKkTfpISUI95Sv36fEBg5Got-MHwbc6ufnsS5ILDKI1e7oJQFCXpFeqMAPgZOu1YDWuazA61BYee6valx8UQOWFsCreHYHehjE3WNYyGCatmEfmJqWM3VPYdioyqeyF4o2lfpCgmKUutOYYIVeWo5554g0Cazohb6kAtaor6GSLccu-1Q_3EiXwK62DsDBHaIy_LGIw9HZy7Z7wKbANVlMiyWVYdIk40HGv_GWyG9cKCSvmA4St19YcmSpCqXBg7FYAv9Jj55phZPl__RgQ2CSymmfmqGu090Fr2vRBTUFAkkI_PJb9PecZDIRSf4LZ8nL1-bwQs8FPGRJxH-NmshVqvzot6cFwDVIaJPL2pyOJkTX3ZvTg92JP9vQadCHcaiyphAeoNAKCvCeznfQ2xKiCjo3ZOy8YHSlpFDaPnUDLIurSuc4LqjI5GafehTZji6rNY5aZ95oSN6tj-BZlsze02JDc0pvxZ0G9ayA2gu2-rhcgtJHcO-ba9_mDkFbr7GpOdcmP209xeXoITmPuvtiUdZphjZRuStTx0pJNgRW93ateODaVuGa_v8CdJBlISq9N15bZYNCwpd8PMI9Icbz_T6GKL1YfjOf1pvCaHIPqwLf88RILh-fVH_LV_PeVUpE2PbplRQ24URuMLUhlV2oj63P91ArCf2cxyjn8vGE8bOj8pOwcozJd4ihLj5Yjzujibm_7kGYUGkAfQqPk1V_-OaDmGduAWlitmolr76bcjdY4oajclmVL3jNDeys1Yj1dDuXCdL5CwSqx9mvA2-YiLXepytXtNQgOzn0MmvsX8bq_ovkAzpMGklcJ0vWVWpZIT1umCXAOhoYWYOTR5lYSKAQqeyCk9yCcGaGeA8GbT4VSS5hpRah0wL81eNU2tewSEHJCu-a6HhZm95y7_FagJWmGJeWbSZZk7ApZM2QtoFm1BhWcHh1ZZa9i-5fGzjC2r5uYx5C3UiDIuf8vceFLnMS56Bob9fEsE94ohrYnIimAz4Ax2hGLte4Eky4R-riZPbAmbIcRJgiiZeSmwrGa9dZO8jEjgKRGOkAXuA8JGNmxDQmx6TIvjp69ZXOgsfMOJqEOT9Ga8o-bear2WmN4C4qeHj4QXXQE262AIfsxjNmz0H32jGBc5RG3Lkk0n4_ibq7ekC3U5rECF66zUpRRoTiXsqEyxLnw6ATRICOwd3DfOUD1bN7UjgRvyfO2Fqrc70Sk8Qt5n3soLjSS6gzXPKVhMRUICHqxvwxGGaTPO3zDfGLrweVTbRR5AOwXWIURmUTFiSszzoFCl2mGxaSXGmyrodUhDrgrsW962LvB9sfxVbWcThG7EnJC6uHgumPU-RXEpKTNBN8fhNrFULKzU9XUtJYazEAvv3Ytb8kO6paXkr9HhwDcf4ZWfww1A81c2Te6wDxFOwgQdAoEVDtxqyhWL_ehzf1A2tjHEkb5tlcAcDuQJBsopL1Ty7Tr5APH597d9ePEBCC1F_GZXHpZza5uXl1-TCZASeNx9LyraMmEivlp83s71QqvpdjGggCGIjOrHXdVeQWy2cHm5WUXIOB0zT5EHWbARaGMuYfAGiOeqcmndYF6RhiIYka4rr5CIypkQXtkrRKpkCL5xbWdwAzzweNHlkMuy2cTXf0dCTyCs49K60_ncgNv1H6XSqp4cNhK1oLz9g89LgJ3Ce8t8LTdmNOvh9zGr8VKFQLME-WaPhm9BTTivXvTwGPlT8VK7IsKsrSYEj9IO3mQCqWgPvyuXRltuqeiAZimnyT9U1ZrR1z-Wk31rzG-LunXXqPvkLoiNLJeQw_OTQRwgs_b07_cOt-rCMQ7kNLa-ft-mgi8bhMi1nv0fciYkFhYeJqbjZZgJcHO7-WwfDLCS8-hh6nLO4ONXkL6UwDI4yaAi-EMDWMDaYo8gj4PsPKU1OM1YdOzbH81OjuQ8s-RpC5i8mSJKfaWOxNt0cPYAhRTWn0f0qqfOhU_QgaOW-1rEaRzEHAy5zLiNfoPNn_QnA6mLpw-xDMEzFgaMnMfl-rUcRcVnPjHZ3OYyzQZ7PgHusVm52em16SAjEsX4yKl8S2T4JoxuvLiS8R4MBGLqspzW0PiHLhd1pGiLT52F_gm1rgD_XFFcmDPF96tbcHEbx0_kqHN69hmUQBwEi2pA81dPYtFEvTwBERE75pP7TS0K9c7inxuebHruKU51vbu0RqCAtctjtWxUbhX7GU541m-JVWmKuQWFHa_XfqVjpe-C0NiHQRYxSJjTG58YxDMD0TPglWctlm-oN8LKlIjwTgUj_RcyN-kV-ZuMOGnbZfuhgOrI7W-9h0gs3zx2BxNtU5LMmlLXMpqRy3CkWla45ljlEVaclCBUAAAKXDRDWlRi5dj-qnxSYNJ5diJyqMZ4lwejhZGhpt5Uh5RqFOupEGNUzvMmbYKM4VQebO2vY6AknBOWfcPictU2OBrZqVE_Jih4HyBvDLJKt8nVnAYeOLHx5otPQfgnkpscODmkH-vsUWeFlZXHPfFfNWg-Ar4w13y7Tu0DcyKfLll9oWIi3ulA1EMZ0s39pLzGIRbPcMLHi-p2bKR49IeeyooH5tR0xfvkzjYehh3Hj4arwIGgPKu4pq9KPw2zYwYUSUJB3sJf5r_pCK8yFMXPeARMbIGnzPSxgC4yg_7zWjZfZB8fNudLKVsgZ825ncSb-sAJwowe7pHSzsls0UgXgFLojWwA96NOW3V__17E9K_GZulOYOmlGi7DA9UBDuuwbcaUtaqiHdmjsavlzpXX-ku9ipLtBrYV4U0vxhze15B3Lyz6OaqBOuvrNixSqpNukgc0BBrn70Rn6vNM7UJdQ-bn3JwYq3jvXJLZJPUTzC42szTg9xkdK0R4UK5_6FFOdqoeJeVSrG26EAkrpZzp3pLhu5Av4UFRpr2kvG5zHN3AaUeJoMjLSJrED3cocb8twnDFxssYRaYYvaF1squnRbVpkVCXQ4rG7iZZpQhxSV5Ql_rJ7pKaHmeDaoMYMnjql6dijPT-YmqO2iCdTjaETPTBOKpxfRORgrm3spmFKpP0xYzsHbJUkFlboVVtFdp-UpJxMoWs-3xvx-_Rrg-FZa-FZvFYl9r5oz6x1_tlrzisxasHnT_JwE3fExeuENyU7HszEtXqUlbuSdYmEtnmdhuuZz7Pn5ty7MYArYtGBgMs9-3OiGiS-GfJfqDxY6UhfC-XD-XBe7sMkKhqWeJTtPtQcucu4D1Oi4M1_o6WUENebnZC9IMs5udjkjeaeXaIb8PZOqNSQ1uks-cXVXEx4SYo_yprf9mvCxPoGzKlOtIyjEbxEsXVyPYoKYctF8kugr7mgokKLraM3LEw4b4Ad73kHVndW2TuBWR9aWZPx8FmwYma_KNqO-YVaJ3mhwhyC8-kZGoL6OwqsTZeAZAv7k7D4A_4-ojlYh-oA7ptoyg_E2Hm_V_hBmO7p9pGUKFqTk0V47o_zF-_nST6DeJFZXtpvyjH-ApDm_g339Ee44lIaONj_Ds6IwGJq_5QY4yTAWRtGWbdhs1uOp_rDVetfPiEEyIOekIRRnra3yocQtBd-pin-pKIKBQatE0Ftsnf1HklN6FVI1mTEJUczuMPlhYvUjpNxC9mjEH-maT-um3fP59DcyyO7fmcg4yHArwnI-kNB_vu28nouYqeNT-uwhuTL0rX_WTA1P0ZR0rcvZ9uXTqCQpjKNk16ldWGxs3IdFOck2UOtN1qI-3PWrSWRp7de-0vCPMW_y1grpDB_0G
' Generated on: 2025-09-06T00:00:37.850332500

@startuml
!pragma layout svg
skinparam classFontSize 15
skinparam classAttributeIconSize 0
skinparam classAttributeFontSize 13
hide circle

class EmailConfig {
  +getJavaMailSender(): JavaMailSender
}

class SecConf {
  +securityFilterChain(http: HttpSecurity): SecurityFilterChain
}

class SecurityConfig {
  +passwordEncoder(): PasswordEncoder
}

class AnalisysController {
  -dynamicTableService: DynamicTableService
  -userService: UserService
  -tableRepository: CollectionTableRepository
  --
  +AnalisysController(dynamicTableService: DynamicTableService, userService: UserService, tableRepository: CollectionTableRepository)
  +getMethodName(sessionToken: String, model: Model): String
  +postMethodName(sessionToken: String, tableName: String): String
}

class CollectionTableController {
  -dynamicTableService: DynamicTableService
  -userService: UserService
  --
  +CollectionTableController(dynamicTableService: DynamicTableService, userService: UserService)
  +createNewTable(token: String, tableCreationForm: TableCreationForm): ResponseEntity<?>
  +initiateTableCreation(token: String): String
  +getMethodName(token: String, tableName: String): ResponseEntity<?>
  +inputValueIntoTable(tableName: String, userToken: String, allParams: Map<String,String>): ResponseEntity<?>
  +getRequestInputByID(id: String, allParams: Map<String,String>): ResponseEntity<?>
  +getUserTables(token: String): ResponseEntity<?>
}

class ManagementController {
  -userService: UserService
  --
  +ManagementController(userService: UserService)
  -validateSessionToken(sessionToken: String): User
  +getDashboard(token: String, model: Model): String
}

class ScheduledEventController {
  +userService: UserService
  +scheduledEventsService: ScheduledEventsService
  +emailService: EmailServiceImpl
  --
  +ScheduledEventController(userService: UserService, scheduledEventsService: ScheduledEventsService, emailService: EmailServiceImpl)
  +createScheduledEvent(sessionToken: String, eventCreationForm: SchEvCreationForm): ResponseEntity<?>
  +getMethodName(sessionToken: String): String
  +getMethodName(sessionToken: String, eventId: String, model: Model): String
}

class UserController {
  -userService: UserService
  --
  +UserController(userService: UserService)
  -validateSessionToken(sessionToken: String): User
  +getHomePage(): String
  +getLoginPage(token: String, model: Model): String
  +logoutUser(token: String, model: Model): String
  +errorOccuring(entity: String): String
  +loginUser(loginForm: LoginForm): ResponseEntity<?>
  +getAccountPage(token: String, model: Model): String
  +getSignupPage(token: String, model: Model): String
  +newUser(signupForm: SignupForm, model: Model): ResponseEntity<?>
}

class DatagathApplication {
  +{static} main(args: String[]): void
}

class ColumnDTO {
  -name: String
  -type: String
  --
  +getName(): String
  +setName(name: String): void
  +getType(): String
  +setType(type: String): void
}

class LoginForm {
  -name: String
  -password: String
  -stayLoggedIn: String
  --
  +getName(): String
  +setName(name: String): void
  +getPassword(): String
  +setPassword(password: String): void
  +getStayLoggedIn(): Boolean
  +setStayLoggedIn(stayLoggedIn: String): void
}

class SchEvCreationForm {
  -eventName: String
  -userId: Long
  -cronString: String
  -description: String
  -actionBody: String
  -action: String
  -pingAddress: String
  -sendAddress: String
  -model: String
  -apikey: String
  -prompt: String
  -dataset: String
  -visualisationType: String
  -customcode: String
  --
  +getEventName(): String
  +setEventName(eventName: String): void
  +getUserId(): Long
  +setUserId(userId: Long): void
  +getCronString(): String
  +setCronString(cronString: String): void
  +getDescription(): String
  +setDescription(description: String): void
  +getActionBody(): String
  +setActionBody(actionBody: String): void
  +getAction(): String
  +setAction(action: String): void
  +getPingAddress(): String
  +setPingAddress(pingAddress: String): void
  +getSendAddress(): String
  +setSendAddress(sendAddress: String): void
  +getModel(): String
  +setModel(model: String): void
  +getApikey(): String
  +setApikey(apikey: String): void
  +getPrompt(): String
  +setPrompt(prompt: String): void
  +getDataset(): String
  +setDataset(dataset: String): void
  +getVisualisationType(): String
  +setVisualisationType(visualisationType: String): void
  +getCustomcode(): String
  +setCustomcode(customcode: String): void
}

class SchEvCreationResponse {
  -success: Boolean
  -eventId: Long
  --
  +getSuccess(): Boolean
  +getEventId(): Long
  +setSuccess(success: Boolean): void
  +setEventId(eventId: Long): void
}

class SessionResponse {
  -success: Boolean
  -sessionToken: SessionToken
  --
  +getSuccess(): Boolean
  +getSessionToken(): String
  +setSuccess(success: Boolean): void
  +setSessionToken(sessionToken: SessionToken): void
}

class SignupForm {
  -email: String
  -name: String
  -password: String
  --
  +getName(): String
  +setName(name: String): void
  +getEmail(): String
  +setEmail(email: String): void
  +getPassword(): String
  +setPassword(password: String): void
}

class TableCreationForm {
  -tableName: String
  +isPublic: Boolean
  +columns: List<ColumnDTO>
  -userId: Long
  --
  +getTableName(): String
  +setName(name: String): void
  +getUserId(): Long
  +setUserId(id: Long): void
  +setIsPublic(isPublic: Boolean): void
  +getIsPublic(): Boolean
  +setColumns(columns: List<ColumnDTO>): void
  +getColumns(): List<ColumnDTO>
  +getColumnsString(): String
}

class TableCreationResponse {
  -success: Boolean
  -tableToken: TableToken
  --
  +getSuccess(): Boolean
  +getTableToken(): String
  +setSuccess(success: Boolean): void
  +setTableToken(sessionToken: TableToken): void
}

class CollectionTable {
  -id: String
  -name: String
  -isPublic: Boolean = false
  -ownerId: Long
  -datatype: String
  -remainingInputs: int
  -length: int
  -url: String
  -lastActive: Instant
  -columns: Map<String, String>
  --
  +CollectionTable(name: String, ownerId: Long, datatype: String)
  +CollectionTable()
  +allowInput(source: String, timestamp: Date, datatype: String, content: String): void
  +getId(): String
  +setId(id: String): void
  +getName(): String
  +setName(name: String): void
  +getOwnerId(): Long
  +setOwnerId(ownerId: Long): void
  +getDatatype(): String
  +setDatatype(datatype: String): void
  +getRemainingInputs(): int
  +setRemainingInputs(remainingInputs: int): void
  +getLength(): int
  +setLength(length: int): void
  +getUrl(): String
  +setUrl(url: String): void
  +getIsPublic(): Boolean
  +setIsPublic(isPublic: Boolean): void
  +getLastActive(): Instant
  +setLastActive(lastActive: Instant): void
  +getColumns(): Map<String,String>
  +setColumns(columns: Map<String,String>): void
}

class ScheduledEvent {
  ~owner: User
  ~id: Long
  ~name: String
  ~cronString: String
  ~description: String
  ~action: String
  ~actionBody: String
  --
  +ScheduledEvent()
  +ScheduledEvent(name: String, cronString: String, owner: User)
  +getOwner(): User
  +setOwner(owner: User): void
  +getName(): String
  +setName(name: String): void
  +getCronString(): String
  +setCronString(cronString: String): void
  +getDescription(): String
  +setDescription(description: String): void
  +getAction(): String
  +setAction(action: String): void
  +setActionBody(actionBody: String): void
  +getActionBody(): String
  +getId(): Long
  +setId(id: Long): void
}

class SessionToken {
  -token: String
  -userId: Long
  +rejection: int
  -expiryDate: Instant
  -creationDate: Instant
  -lastUsedAt: Instant
  --
  +SessionToken()
  +SessionToken(userId: Long, expiryDate: Instant, creationDate: Instant, lastusedAt: Instant)
  +SessionToken(number: int)
  +getToken(): String
  +getUserId(): Long
  +getExpiryDate(): Instant
  +getCreationDate(): Instant
  +getLastUsedAt(): Instant
}

class TableToken {
  -token: String
  -userId: Long
  +rejection: int
  -tableName: String
  -expiryDate: Instant
  -creationDate: Instant
  -lastUsedAt: Instant
  --
  +TableToken()
  +TableToken(userId: Long, expiryDate: Instant, creationDate: Instant, lastusedAt: Instant, TableName: String)
  +TableToken(number: int)
  +getToken(): String
  +getUserId(): Long
  +getExpiryDate(): Instant
  +getCreationDate(): Instant
  +getLastUsedAt(): Instant
}

class User {
  -id: Long
  -name: String
  -email: String
  -tier: String
  -password: String
  --
  +User()
  +User(email: String, name: String, password: String)
  +getId(): Long
  +setId(id: long): void
  +getName(): String
  +setName(name: String): void
  +getEmail(): String
  +setEmail(email: String): void
  +getTier(): String
  +setTier(tier: String): void
  +getPassword(): String
  +setPassword(password: String): void
  +toString(): String
}

interface CollectionTableRepository {
  ~findById(id: String): Optional<CollectionTable>
  ~findByName(name: String): Optional<CollectionTable>
  ~findByOwnerId(ownerId: Long): List<CollectionTable>
}

interface ScheduledEventsRepository {
  ~findByOwner(user: User): Optional<ScheduledEvent>
  ~findByName(token: String): List<ScheduledEvent>
  ~findById(id: Long): Optional<ScheduledEvent>
}

interface SessionTokenRepository {
  ~findByUserId(userId: Long): Optional<SessionToken>
  ~findByToken(token: String): Optional<SessionToken>
}

interface TableTokenRepository {
  ~findByUserId(userId: Long): Optional<TableToken>
  ~findByToken(token: String): Optional<TableToken>
}

interface UserRepository {
  ~findByEmail(email: String): Optional<User>
  ~findById(id: Long): Optional<User>
  ~findByName(name: String): Optional<User>
}

class DynamicTableService {
  -entityManager: EntityManager
  -tableRepository: CollectionTableRepository
  -tableTokenRepository: TableTokenRepository
  -userRepository: UserRepository
  --
  +DynamicTableService(entityManager: EntityManager, tableRepository: CollectionTableRepository, tableTokenRepository: TableTokenRepository, userRepository: UserRepository)
  +verifySqlLiterals(string: String): Boolean
  +createNewTableToken(user: User, table: CollectionTable): TableToken
  +validateTableToken(token: String): User
  +createTable(tableName: String, ownerId: Long, columns: Map<String,String>): TableCreationResponse
  +findTable(userId: Long, name: String): CollectionTable
  +findTable(tableId: String): CollectionTable
  +insertValueIntoTable(tableName: String, userId: Long, values: Map<String,String>): int
  +toEchartsOption(results: List<Map<String,Object>>): String
  +formatTableIntoEcharts(tableName: String, ownerId: Long): String
  -switchColumnType(colName: String, colType: String, tableId: String): Map<String,String>
  +tableSummary(tableName: String, ownerId: Long): Map<String,Map<String,String>>
  +exportTableToCsv(tableName: String, ownerId: Long): String
  +getAllTableNamesForUser(user: User): String
}

interface EmailService {
  +sendSimpleMessage(to: String, subject: String, text: String): void
  +sendMessageWithAttachment(to: String, subject: String, text: String, document: Document): void
}

class EmailServiceImpl {
  -emailSender: JavaMailSender
  --
  +EmailServiceImpl(emailSender: JavaMailSender)
  +sendSimpleMessage(to: String, subject: String, text: String): void
  +sendMessageWithAttachment(to: String, subject: String, text: String, document: Document): void
}

class FileGenerationService {
  +FileGenerationService()
  +{static} generatePDFReportOnCollectionTable(collectionTable: CollectionTable): Document
}

class NetworkActionsService {
  +emailService: EmailServiceImpl
  --
  +NetworkActionsService(emailService: EmailServiceImpl)
  +{static} llm_response(model: String, apikey: String, prompt: String): String
  +{static} sendResponse(response: String, sendAddress: String): void
  +sendResponse(document: Document, sendAddress: String): void
}

class ScheduledEventsService {
  -scheduledEventsRepository: ScheduledEventsRepository
  -taskScheduler: TaskScheduler
  -userRepository: UserRepository
  --
  +ScheduledEventsService(scheduledEventsRepository: ScheduledEventsRepository, taskScheduler: TaskScheduler, userRepository: UserRepository)
  +executeEvent(event: ScheduledEvent): void
  +executeEventById(id: Long): void
  +startPayloadExecution(action: String, actionParams: Map<String,String>): void
  +insertIntoSchedule(event: ScheduledEvent, eventBody: Map<String,String>): ScheduledEvent
  +createNewScheduledEvent(creationForm: SchEvCreationForm, eventBody: Map<String,String>): SchEvCreationResponse
}

class UserService {
  -userRepository: UserRepository
  -sessionTokenRepository: SessionTokenRepository
  -passwordEncoder: PasswordEncoder
  -collectionTableRepository: CollectionTableRepository
  -{static} DUMMY_HASH: String = "664322822d298ad17bd1736578dbf142a2df104c01587004b08b052d32ae6bfc"
  --
  +UserService(userRepository: UserRepository, passwordEncoder: PasswordEncoder, sessionTokenRepository: SessionTokenRepository, collectionTableRepository: CollectionTableRepository)
  +validateSessionToken(token: String): User
  +GetAllDatasetsOfAUser(user: User): List<CollectionTable>
  +createUser(name: String, email: String, password: String): SessionResponse
  +checkCredentials(username: String, password: String): boolean
  +loginUser(name: String, password: String): SessionResponse
  +loginUser(loginForm: LoginForm): SessionResponse
  +loginUser(user: User): SessionResponse
  +logoutUser(sessionToken: SessionToken): void
  +logoutUser(token: String): void
  +getUserById(id: Long): User
}

class Stats {
  +{static} mean(values: List<Double>): double
  +{static} median(values: List<Double>): double
  +{static} stdDev(values: List<Double>): double
  +{static} zScores(values: List<Double>): List<Double>
  +{static} mode(values: List<Double>): double
  +{static} top10Strings(values: List<String>): Map<String,String>
}

class DatagathApplicationTests {
  ~contextLoads(): void
}

AnalisysController *-- DynamicTableService
AnalisysController *-- UserService
AnalisysController *-- CollectionTableRepository
CollectionTableController *-- DynamicTableService
CollectionTableController *-- UserService
CollectionTableController ..> TableCreationForm
ManagementController *-- UserService
ManagementController ..> User
ScheduledEventController *-- UserService
ScheduledEventController *-- ScheduledEventsService
ScheduledEventController *-- EmailServiceImpl
ScheduledEventController ..> SchEvCreationForm
UserController *-- UserService
UserController ..> User
UserController ..> LoginForm
UserController ..> SignupForm
SessionResponse *-- SessionToken
TableCreationForm o-- ColumnDTO
TableCreationResponse *-- TableToken
ScheduledEvent --> User
ScheduledEventsRepository ..> User
DynamicTableService *-- CollectionTableRepository
DynamicTableService *-- TableTokenRepository
DynamicTableService *-- UserRepository
DynamicTableService ..> User
DynamicTableService ..> CollectionTable
DynamicTableService ..> TableToken
DynamicTableService ..> TableCreationResponse
EmailServiceImpl ..|> EmailService
FileGenerationService ..> CollectionTable
NetworkActionsService *-- EmailServiceImpl
ScheduledEventsService *-- ScheduledEventsRepository
ScheduledEventsService *-- UserRepository
ScheduledEventsService ..> ScheduledEvent
ScheduledEventsService ..> SchEvCreationForm
ScheduledEventsService ..> SchEvCreationResponse
UserService *-- UserRepository
UserService *-- SessionTokenRepository
UserService *-- CollectionTableRepository
UserService ..> User
UserService ..> SessionResponse
UserService ..> LoginForm
UserService ..> SessionToken
@enduml